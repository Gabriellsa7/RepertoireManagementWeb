// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepertoireManagementWeb.Data;

#nullable disable

namespace RepertoireManagementWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250726152058_InitialTest")]
    partial class InitialTest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BandUser", b =>
                {
                    b.Property<Guid>("BandsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BandsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("BandUser");
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.Band", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<Guid?>("LeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.Music", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<byte[]>("PdfFile")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("pdf_file");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Musics");
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.Repertoire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.ToTable("Repertoires");
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.RepertoireMusic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("MusicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderInRepertoire")
                        .HasColumnType("int")
                        .HasColumnName("order_in_repertoire");

                    b.Property<Guid?>("RepertoireId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MusicId");

                    b.HasIndex("RepertoireId");

                    b.ToTable("repertoire_music");
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BandUser", b =>
                {
                    b.HasOne("RepertoireManagementWeb.Models.Band", null)
                        .WithMany()
                        .HasForeignKey("BandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepertoireManagementWeb.Models.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.Band", b =>
                {
                    b.HasOne("RepertoireManagementWeb.Models.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.Repertoire", b =>
                {
                    b.HasOne("RepertoireManagementWeb.Models.Band", "Band")
                        .WithMany("Repertoires")
                        .HasForeignKey("BandId");

                    b.Navigation("Band");
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.RepertoireMusic", b =>
                {
                    b.HasOne("RepertoireManagementWeb.Models.Music", "Music")
                        .WithMany("RepertoireLinks")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RepertoireManagementWeb.Models.Repertoire", "Repertoire")
                        .WithMany("MusicLinks")
                        .HasForeignKey("RepertoireId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Music");

                    b.Navigation("Repertoire");
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.Band", b =>
                {
                    b.Navigation("Repertoires");
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.Music", b =>
                {
                    b.Navigation("RepertoireLinks");
                });

            modelBuilder.Entity("RepertoireManagementWeb.Models.Repertoire", b =>
                {
                    b.Navigation("MusicLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
